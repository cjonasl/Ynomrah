        private void PrintRequest(string request)
        {
            FileStream fileStream = null;

            try
            {
                fileStream = new FileStream("C:\\Monitor Harmony\\Request" + Guid.NewGuid().ToString().Replace("-", "") + ".txt", FileMode.Create, FileAccess.Write, FileShare.None);
            }
            catch
            {
                if (fileStream != null)
                    fileStream.Close();

                return;
            }

            StreamWriter streamWriter = new StreamWriter(fileStream, Encoding.UTF8);
            streamWriter.Write(request);

            streamWriter.Flush();
            fileStream.Flush();
            streamWriter.Close();
            fileStream.Close();
        }

        private string ReturnRequestSummary()
        {
            StringBuilder sb = new StringBuilder();

            if (Request.Url != null)
            {
                sb.Append("Url: " + ReturnString(Request.Url.AbsolutePath) + ", ");
            }
            else
            {
                sb.Append("Url: Null, ");
            }

            if (Request.Params != null)
            {
                sb.Append("Params: " + Request.Params.Count.ToString() + ", ");
            }
            else
            {
                sb.Append("Params: 0, ");
            }

            if (Request.QueryString != null)
            {
                sb.Append("QueryString: " + Request.QueryString.Count.ToString() + ", ");
            }
            else
            {
                sb.Append("QueryString: 0, ");
            }

            if (Request.Form != null)
            {
                sb.Append("Form: " + Request.Form.Count.ToString() + ", ");
            }
            else
            {
                sb.Append("Form: 0, ");
            }

            if (Request.Headers != null)
            {
                sb.Append("Headers: " + Request.Headers.Count.ToString() + ", ");
            }
            else
            {
                sb.Append("Headers: 0, ");
            }

            if (Request.ServerVariables != null)
            {
                sb.Append("ServerVariables: " + Request.ServerVariables.Count.ToString() + ", ");
            }
            else
            {
                sb.Append("ServerVariables: 0, ");
            }

            if (Request.Cookies != null)
            {
                sb.Append("Cookies: " + Request.Cookies.Count.ToString() + ", ");
            }
            else
            {
                sb.Append("Cookies: 0, ");
            }

            if (Request.Files != null)
            {
                sb.Append("Files: " + Request.Files.Count.ToString());
            }
            else
            {
                sb.Append("Files: 0 ");
            }

            return sb.ToString();
        }

        private string ReturnString(string str)
        {
            if (str == null)
            {
                return "Null";
            }
            else if (string.IsNullOrWhiteSpace(str))
            {
                return "Empty string";
            }
            else
            {
                return str.Replace("\r\n", " ");
            }
        }

        private string ReturnStringArray(string[] v)
        {
            if (v == null)
            {
                return "null";
            }
            else if (v.Length == 0)
            {
                return "Empty";
            }
            else
            {
                StringBuilder sb = new StringBuilder();

                for(int i = 0; i < v.Length; i++)
                {
                    if (i == 0)
                    {
                        sb.Append(ReturnString(v[i]));
                    }
                    else
                    {
                        sb.Append(", " + ReturnString(v[i]));
                    }
                }

                return sb.ToString();
            }
        }

        private string ReturnNameValueCollection(NameValueCollection v)
        {
            StringBuilder sb = new StringBuilder();
            ArrayList arrayList = new ArrayList();
            int i;
            string key, value;

            if (v == null)
            {
                return "null";
            }

            if (v.Count == 0)
            {
                return "Empty";
            }

            for(i = 0; i < v.Count; i++)
            {
                arrayList.Add(v.AllKeys[i]);
            }

            arrayList.Sort();

            for (i = 0; i < v.Count; i++)
            {
                key = (string)arrayList[i];
                value = v[key];
                sb.Append(string.Format("Key[{0}] Value[{1}]\r\n", ReturnString(key), ReturnString(value)));
            }

            return sb.ToString().TrimEnd();
        }

        private string ReturnHttpCookieCollection(HttpCookieCollection v)
        {
            StringBuilder sb = new StringBuilder();
            ArrayList arrayList = new ArrayList();
            int i;
            string key, value;

            if (v == null)
            {
                return "null";
            }

            if (v.Count == 0)
            {
                return "Empty";
            }

            for (i = 0; i < v.Count; i++)
            {
                arrayList.Add(v.AllKeys[i]);
            }

            arrayList.Sort();

            for (i = 0; i < v.Count; i++)
            {
                key = (string)arrayList[i];
                value = v[key].Value;
                sb.Append(string.Format("Key[{0}] Value[{1}]\r\n", ReturnString(key), ReturnString(value)));
            }

            return sb.ToString().TrimEnd();
        }

        private string ReturnHttpFileCollection(HttpFileCollection v)
        {
            StringBuilder sb = new StringBuilder();
            ArrayList arrayList = new ArrayList();
            int i;
            string key, value;

            if (v == null)
            {
                return "null";
            }

            if (v.Count == 0)
            {
                return "Empty";
            }

            for (i = 0; i < v.Count; i++)
            {
                arrayList.Add(v.AllKeys[i]);
            }

            arrayList.Sort();

            for (i = 0; i < v.Count; i++)
            {
                key = (string)arrayList[i];
                value = v[key].FileName;
                sb.Append(string.Format("Key[{0}] Value[{1}]\r\n", ReturnString(key), ReturnString(value)));
            }

            return sb.ToString().TrimEnd();
        }

        private string ReturnBasicVariables()
        {
            StringBuilder sb = new StringBuilder();

            sb.Append(string.Format("string ApplicationPath: {0}\r\n", ReturnString(Request.ApplicationPath)));
            sb.Append(string.Format("string PhysicalApplicationPath: {0}\r\n", ReturnString(Request.PhysicalApplicationPath)));
            sb.Append(string.Format("string UserAgent: {0}\r\n", ReturnString(Request.UserAgent)));
            sb.Append(string.Format("string[] UserLanguages: {0}\r\n", ReturnStringArray(Request.UserLanguages)));
            sb.Append(string.Format("string UserHostName: {0}\r\n", ReturnString(Request.UserHostName)));
            sb.Append(string.Format("string UserHostAddress: {0}\r\n", ReturnString(Request.UserHostAddress)));
            sb.Append(string.Format("string RawUrl: {0}\r\n", ReturnString(Request.RawUrl)));
            sb.Append(string.Format("int TotalBytes: {0}\r\n", Request.TotalBytes.ToString()));
            sb.Append(string.Format("string PhysicalPath: {0}\r\n", ReturnString(Request.PhysicalPath)));
            sb.Append(string.Format("string PathInfo: {0}\r\n", ReturnString(Request.PathInfo)));
            sb.Append(string.Format("string AppRelativeCurrentExecutionFilePath: {0}\r\n", ReturnString(Request.AppRelativeCurrentExecutionFilePath)));
            sb.Append(string.Format("string CurrentExecutionFilePathExtension: {0}\r\n", ReturnString(Request.CurrentExecutionFilePathExtension)));
            sb.Append(string.Format("bool IsLocal: {0}\r\n", Request.IsLocal.ToString()));
            sb.Append(string.Format("string RequestType: {0}\r\n", ReturnString(Request.RequestType)));
            sb.Append(string.Format("string ContentType: {0}\r\n", ReturnString(Request.ContentType)));
            sb.Append(string.Format("int ContentLength: {0}\r\n", Request.ContentLength.ToString()));
            sb.Append(string.Format("string HttpMethod: {0}\r\n", ReturnString(Request.HttpMethod)));
            sb.Append(string.Format("bool IsAuthenticated: {0}\r\n", Request.IsAuthenticated.ToString()));
            sb.Append(string.Format("string[] AcceptTypes: {0}\r\n", ReturnStringArray(Request.AcceptTypes)));
            sb.Append(string.Format("string CurrentExecutionFilePath: {0}\r\n", ReturnString(Request.CurrentExecutionFilePath)));
            sb.Append(string.Format("string FilePath: {0}\r\n", ReturnString(Request.FilePath)));
            sb.Append(string.Format("string Path: {0}\r\n", ReturnString(Request.Path)));
            sb.Append(string.Format("bool IsSecureConnection: {0}\r\n", Request.IsSecureConnection.ToString()));
            sb.Append(string.Format("string Path: {0}", ReturnString(Request.AnonymousID)));
            
            return sb.ToString();
        }

        private void PrintRequest()
        {
            StringBuilder sb = new StringBuilder();

            sb.Append(ReturnRequestSummary());
            sb.Append("\r\n\r\n");

            sb.Append("--------------------- Basic variables ------------------");
            sb.Append("\r\n\r\n");
            sb.Append(ReturnBasicVariables());
            sb.Append("\r\n\r\n");

            sb.Append("--------------------- QueryString ----------------------");
            sb.Append("\r\n\r\n");
            sb.Append(ReturnNameValueCollection(Request.QueryString));
            sb.Append("\r\n\r\n");

            sb.Append("--------------------- Form -----------------------------");
            sb.Append("\r\n\r\n");
            sb.Append(ReturnNameValueCollection(Request.Form));
            sb.Append("\r\n\r\n");

            sb.Append("--------------------- Headers --------------------------");
            sb.Append("\r\n\r\n");
            sb.Append(ReturnNameValueCollection(Request.Headers));
            sb.Append("\r\n\r\n");

            sb.Append("--------------------- ServerVariables ------------------");
            sb.Append("\r\n\r\n");
            sb.Append(ReturnNameValueCollection(Request.ServerVariables));
            sb.Append("\r\n\r\n");

            sb.Append("--------------------- Cookies --------------------------");
            sb.Append("\r\n\r\n");
            sb.Append(ReturnHttpCookieCollection(Request.Cookies));
            sb.Append("\r\n\r\n");

            sb.Append("--------------------- Files ----------------------------");
            sb.Append("\r\n\r\n");
            sb.Append(ReturnHttpFileCollection(Request.Files));
            sb.Append("\r\n\r\n");

            PrintRequest(sb.ToString());
        }


		Put in Application_BeginRequest():

		    string str = Request.Url.AbsolutePath.ToLower();
            bool skip = (str.EndsWith(".js") || str.EndsWith(".css") || str.EndsWith(".png") || str.EndsWith(".jpg") || str.EndsWith(".gif") || str.EndsWith(".woff)"));
            
            if (!skip)
            {
                PrintRequest();
            }
